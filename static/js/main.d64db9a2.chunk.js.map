{"version":3,"sources":["serviceWorker.ts","api/types.ts","api/todolist-api.ts","features/CommonActions/ApplicationCommonActions.ts","utils/errorUtils.ts","features/TodolistsList/todolistReducer/todolists-reducer.ts","features/TodolistsList/taskReducer/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","utils/reduxUtils.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/selectors.ts","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.ts","features/Auth/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.ts","features/Application/appReducer/app-reducer.ts","features/Application/selectors.ts","features/Application/index.ts","app/store.ts","components/ErrorSnackBar/ErrorSnackBar.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","origin","todolistAPI","get","title","post","id","delete","put","tasksAPI","todolistId","taskId","properties","authAPI","data","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","getTodolists","createAsyncThunk","param","a","res","todolists","addTodolist","resultCode","todolist","item","removeTodolist","changeTodolistEntityStatusAC","changeTodolistTitle","newTodolistTitle","asyncTodolistsActions","slice","createSlice","name","initialState","reducers","changeTodolistFilterAC","state","action","index","findIndex","tl","payload","filter","entityStatus","extraReducers","builder","addCase","fulfilled","map","unshift","splice","actions","getTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","model","startDate","priority","description","deadline","domainModel","asyncTasksActions","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onBlur","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","onClick","color","style","marginLeft","AddBox","EditableSpan","props","editMode","setEditMode","setNewTitle","autoFocus","onDoubleClick","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","Task","tasksActions","onStatusChangeHandler","useCallback","checked","Completed","New","onTitleChangeCallback","newTitle","removeTaskHandler","key","className","display","alignItems","justifyContent","Checkbox","size","DeleteOutline","fontSize","TodoList","demo","useSelector","todolistsActions","useEffect","taskForToDoList","JsxTaskEls","onFilterButtonClickHandler","buttonFilter","onRemoveToDoListHandler","onTitleChangeHandler","onAddItemHandler","helper","thunk","resultAction","rejected","errorMessage","renderFilterButton","text","Button","Paper","position","padding","right","Delete","margin","selectIsLoggedIn","auth","isLoggedIn","TodolistsList","Grid","container","spacing","to","todolistsAsyncActions","todolistSlice","tasksAsyncActions","taskSlice","todolistsReducer","reducer","tasksReducer","login","logout","authAsyncActions","setIsLoggedInAC","Login","authActions","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","FormGroup","type","getFieldProps","FormControlLabel","control","authReducer","initializeApp","asyncAppActions","isInitialized","selectStatus","app","selectIsInitialized","appReducer","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.d64db9a2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// TYPES\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type FieldErrorType = {\r\n    field: string\r\n    error: string\r\n}\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    todoListId: string\r\n    title: string\r\n    id: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    addedDate: string\r\n    deadline: string\r\n    order: number\r\n    description: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponseType = {\r\n    error: null | string\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\nexport type AuthMeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import axios from 'axios'\r\nimport {\r\n    AuthMeResponseDataType,\r\n    CommonResponseType,\r\n    GetTasksResponseType,\r\n    LoginParamsType,\r\n    TaskType,\r\n    TodolistType,\r\n    UpdateTaskModelType\r\n} from \"./types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fb959993-6c4d-4ae3-923f-a4e9c807c0d9',\r\n        origin: 'http://localhost:3000'\r\n    },\r\n})\r\n\r\n// API\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistType }>>(`todo-lists/`, {title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolistTitle(id: string, title: string) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${id}`, {title})\r\n    },\r\n}\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, properties: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, properties)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<CommonResponseType<AuthMeResponseDataType>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(`auth/login`)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{ id?: number }>>(`auth/login`, data)\r\n    }\r\n}","import {createAction} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType} from \"../Application/appReducer/app-reducer\";\r\n\r\nconst setAppStatus = createAction<{ status: RequestStatusType }>('app/setAppStatus')\r\n\r\nconst setAppError = createAction<{ error: string | null }>('app/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}","import {AxiosError} from \"axios\";\r\nimport {CommonResponseType} from \"../api/types\";\r\nimport {appActions} from \"../features/CommonActions/ApplicationCommonActions\";\r\n\r\nconst {setAppError, setAppStatus} = appActions\r\n\r\nexport const handleAsyncServerAppError = <T>(data: CommonResponseType<T>, thunkAPI: ThunkAPIType, showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: \"failed\"}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError, thunkAPI: ThunkAPIType, showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: \"failed\"}))\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}","import {todolistAPI} from \"../../../api/todolist-api\";\r\nimport {RequestStatusType} from \"../../Application\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {\r\n    handleAsyncServerAppError,\r\n    handleAsyncServerNetworkError,\r\n} from \"../../../utils/errorUtils\";\r\nimport {ThunkError} from \"../../../utils/types\";\r\nimport {TodolistType} from \"../../../api/types\";\r\nimport {appActions} from \"../../CommonActions/ApplicationCommonActions\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst getTodolists = createAsyncThunk<{todolists: Array<TodolistType>}, undefined, ThunkError>('todoLists/getTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: \"idle\"}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst addTodolist = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>('todoLists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst removeTodolist = createAsyncThunk<{id: string}, string, ThunkError>('todoLists/removeTodolist', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id: todolistId, status: \"loading\"}))\r\n    try {\r\n        const res = await todolistAPI.deleteTodolist(todolistId)\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {id: todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst changeTodolistTitle = createAsyncThunk<{id: string, title: string}, { todolistId: string, newTodolistTitle: string }, ThunkError>('todoLists/changeTodolistTitle', async (param, thunkAPI) => {\r\n    try {\r\n        const res = await todolistAPI.updateTodolistTitle(param.todolistId, param.newTodolistTitle)\r\n        if (res.data.resultCode === 0) {\r\n            return {id: param.todolistId, title: param.newTodolistTitle}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncTodolistsActions = {\r\n    getTodolists,\r\n    addTodolist,\r\n    removeTodolist,\r\n    changeTodolistTitle\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValueType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].filter = action.payload.filter\r\n            }\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].entityStatus = action.payload.status\r\n            }\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(getTodolists.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        })\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"})\r\n        })\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].title = action.payload.title\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistEntityStatusAC, changeTodolistFilterAC} = slice.actions\r\n\r\n// TYPES\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType\r\n}","import {tasksAPI} from \"../../../api/todolist-api\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {asyncTodolistsActions} from \"../todolistReducer/todolists-reducer\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {AppRootStateType, ThunkError} from \"../../../utils/types\";\r\nimport {TaskType, UpdateTaskModelType} from \"../../../api/types\";\r\nimport { appActions } from \"../../CommonActions/ApplicationCommonActions\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst getTasks = createAsyncThunk<{ todolistId: string, tasks: Array<TaskType> }, string, ThunkError>('tasks/getTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await tasksAPI.getTasks(todolistId)\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolistId, tasks: res.data.items}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('tasks/removeTask', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    await tasksAPI.deleteTask(param.todolistId, param.taskId)\r\n    thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\nconst addTask = createAsyncThunk<TaskType, { todolistId: string, title: string }, ThunkError>('tasks/ addTask', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await tasksAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst updateTask = createAsyncThunk<{ taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType }, { taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType }, ThunkError>('tasks/updateTask', async (param, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (task) {\r\n        const model: UpdateTaskModelType = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            ...param.domainModel\r\n        }\r\n        const res = await tasksAPI.updateTask(param.todolistId, param.taskId, model)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                return param\r\n            } else {\r\n                return handleAsyncServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI)\r\n        }\r\n    }\r\n})\r\n\r\nexport const asyncTasksActions = {\r\n    getTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(asyncTodolistsActions.addTodolist.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(asyncTodolistsActions.removeTodolist.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(asyncTodolistsActions.getTodolists.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => state[tl.id] = [])\r\n        })\r\n        builder.addCase(getTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload?.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n                }\r\n            }\r\n        })\r\n    }\r\n})\r\n//TYPES\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>,\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormSubmitHelpersType = {\r\n    setError: (error: string) => void\r\n    setTitle: (title: string) => void\r\n}\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelpersType) => void,\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError(\"Field is required!\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div onBlur={() => setError(null)}>\r\n            <TextField\r\n                disabled={disabled}\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton\r\n                disabled={disabled}\r\n                onClick={addItemHandler}\r\n                color={\"primary\"}\r\n                style={{marginLeft: '7px'}}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string,\r\n    setNewTitle: (newTitle: string) => void,\r\n    disabled?: boolean\r\n};\r\n\r\nexport const EditableSpan = React.memo(({disabled = false, ...props}: EditableSpanType) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState<string>(props.title)\r\n\r\n    const activateEditMode = () => {\r\n        !disabled && setEditMode(true);\r\n    };\r\n    const deactivateEditMode = () => {\r\n        if (title.trim()) {\r\n            props.setNewTitle(title);\r\n        } else {\r\n            setTitle(props.title)\r\n        }\r\n        setEditMode(false);\r\n    };\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onBlur={deactivateEditMode}\r\n                autoFocus\r\n                onChange={changeTitle}\r\n            />\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    );\r\n});","import {useDispatch} from \"react-redux\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatchType} from \"./types\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>> (actions: T) {\r\n    const dispatch = useDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {DeleteOutline} from \"@material-ui/icons\";\r\nimport {tasksActions} from \"../../index\";\r\nimport {useActions} from \"../../../../utils/reduxUtils\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/types\";\r\n\r\nexport type TaskPropsType = {\r\n    todoListId: string\r\n    task: TaskType\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {removeTask, updateTask} = useActions(tasksActions)\r\n\r\n    const onStatusChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask(\r\n            {\r\n                taskId: props.task.id,\r\n                todolistId: props.todoListId,\r\n                domainModel: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New}\r\n            })\r\n    }, [props.task.id, props.todoListId])\r\n\r\n    const onTitleChangeCallback = useCallback((newTitle: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            todolistId: props.todoListId,\r\n            domainModel: {title: newTitle}\r\n        })\r\n    }, [props.task.id, props.todoListId])\r\n\r\n    const removeTaskHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todoListId}),\r\n        [props.task.id, props.todoListId])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n             style={{display: 'flex', alignItems: 'center', justifyContent: 'end'}}>\r\n            <Checkbox\r\n                color={\"secondary\"}\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                onChange={onStatusChangeHandler}\r\n            />\r\n            <EditableSpan title={props.task.title} setNewTitle={onTitleChangeCallback}/>\r\n            <IconButton\r\n                onClick={removeTaskHandler}\r\n                style={{marginLeft: 'auto'}}\r\n                size={\"small\"}\r\n            >\r\n                <DeleteOutline fontSize={\"small\"}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, Paper, PropTypes} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useSelector} from \"react-redux\";\r\nimport {FilterValueType, TodolistDomainType} from \"../todolistReducer/todolists-reducer\";\r\nimport {AddItemForm, AddItemFormSubmitHelpersType} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {tasksActions, todolistsActions} from \"../index\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/reduxUtils\";\r\nimport {AppRootStateType} from \"../../../utils/types\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/types\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean,\r\n    todolist: TodolistDomainType\r\n};\r\n\r\nexport const TodoList = React.memo(({demo = false, ...props}: PropsType) => {\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.todolist.id])\r\n    const {getTasks} = useActions(tasksActions)\r\n    const {changeTodolistTitle, removeTodolist, changeTodolistFilterAC} = useActions(todolistsActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!demo)\r\n            getTasks(props.todolist.id)\r\n    }, [])\r\n\r\n    let taskForToDoList = tasks;\r\n    if (props.todolist.filter === \"active\") {\r\n        taskForToDoList = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        taskForToDoList = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    let JsxTaskEls = taskForToDoList.map(t => <Task\r\n        key={t.id}\r\n        task={t}\r\n        todoListId={props.todolist.id}\r\n    />)\r\n\r\n    const onFilterButtonClickHandler = useCallback((buttonFilter: FilterValueType) =>\r\n        changeTodolistFilterAC({id: props.todolist.id, filter: buttonFilter}), [props.todolist.id]);\r\n\r\n    const onRemoveToDoListHandler = useCallback(() =>\r\n        removeTodolist(props.todolist.id), [props.todolist.id]);\r\n\r\n    const onTitleChangeHandler = useCallback((newTitle: string) =>\r\n        changeTodolistTitle({todolistId: props.todolist.id, newTodolistTitle: newTitle}), [props.todolist.id]);\r\n\r\n    const onAddItemHandler = useCallback(async (title: string, helper: AddItemFormSubmitHelpersType) => {\r\n        let thunk = tasksActions.addTask({todolistId: props.todolist.id, title})\r\n        const resultAction = await dispatch(thunk)\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValueType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? \"outlined\" : \"text\"}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}\r\n        >{text}</Button>\r\n    }\r\n\r\n    return (\r\n        <Paper style={{position: 'relative', padding: '10px'}}>\r\n            <IconButton onClick={onRemoveToDoListHandler}\r\n                        disabled={props.todolist.entityStatus === \"loading\"}\r\n                        style={{position: 'absolute', right: '9px', padding: '3px'}}\r\n                        size={\"small\"}\r\n            >\r\n                <Delete fontSize={\"small\"}/>\r\n            </IconButton>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} setNewTitle={onTitleChangeHandler}\r\n                              disabled={props.todolist.entityStatus === \"loading\"}/>\r\n            </h3>\r\n            <AddItemForm addItem={onAddItemHandler} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n\r\n            <div style={{margin: '20px 0'}}>\r\n                {JsxTaskEls}\r\n                {!taskForToDoList.length && <div style={{padding: '10px', color: 'grey'}}>No tasks</div>}\r\n            </div>\r\n            <div>\r\n                {renderFilterButton(\"all\", \"default\", \"All\")}\r\n                {renderFilterButton(\"active\", \"primary\", \"Active\")}\r\n                {renderFilterButton(\"completed\", \"secondary\", \"Completed\")}\r\n            </div>\r\n        </Paper>\r\n    )\r\n})","import {AppRootStateType} from \"../../utils/types\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn","import React, {useCallback, useEffect} from \"react\";\r\nimport {TodolistDomainType} from \"./todolistReducer/todolists-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {AddItemForm, AddItemFormSubmitHelpersType} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TodoList} from \"./Todolist/Todolist\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport {todolistsActions} from \"./index\";\r\nimport {useActions, useAppDispatch} from \"../../utils/reduxUtils\";\r\nimport {AppRootStateType} from \"../../utils/types\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport function TodolistsList({demo = false, ...props}: TodolistsListPropsType) {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const {getTodolists} = useActions(todolistsActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const onAddItemHandler = useCallback(async (title: string, helper: AddItemFormSubmitHelpersType) => {\r\n        const resultAction = await dispatch(todolistsActions.addTodolist(title))\r\n        if (todolistsActions.addTodolist.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        getTodolists()\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px', margin: '10px'}}>\r\n            <AddItemForm addItem={onAddItemHandler}/>\r\n        </Grid>\r\n        <Grid container spacing={7}>\r\n            {todolists.map(tl => <Grid item key={tl.id}>\r\n                <div >\r\n                    <TodoList\r\n                        todolist={tl}\r\n                        demo={demo}\r\n                        key={tl.id}\r\n                    /></div>\r\n            </Grid>)}\r\n        </Grid>\r\n    </>\r\n}","import {asyncTasksActions as tasksAsyncActions, slice as taskSlice} from './taskReducer/tasks-reducer'\r\nimport {asyncTodolistsActions as todolistsAsyncActions, slice as todolistSlice} from './todolistReducer/todolists-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistSlice.actions\r\n}\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...taskSlice.actions\r\n}\r\n\r\nconst todolistsReducer = todolistSlice.reducer\r\nconst tasksReducer = taskSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}","import {authAPI} from \"../../api/todolist-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {LoginParamsType} from \"../../api/types\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {ThunkError} from \"../../utils/types\";\r\nimport {appActions} from \"../CommonActions/ApplicationCommonActions\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst login = createAsyncThunk<undefined, LoginParamsType, ThunkError>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst logout = createAsyncThunk<undefined, undefined, ThunkError>('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const authAsyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state, action) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logout.fulfilled, (state, action) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\nimport {authActions} from \"./index\";\r\nimport {useActions, useAppDispatch} from \"../../utils/reduxUtils\";\r\nimport {LoginParamsType} from \"../../api/types\";\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const {login} = useActions(authActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const validate = (values: LoginParamsType) => {\r\n        const errors: FormErrorType = {};\r\n\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = 'Required'\r\n        } else if (values.password.length < 3) {\r\n            errors.password = 'Too short password'\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(login(values))\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in Enter your your login data,\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            type=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype FormErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n","import {authAsyncActions, slice} from \"./auth-reducer\";\r\nimport {Login} from \"./Login\";\r\nimport * as authSelectors from './selectors'\r\n\r\n\r\nconst authActions = {\r\n    ...authAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authActions,\r\n    Login,\r\n    authSelectors,\r\n    authReducer\r\n}","import {authAPI} from \"../../../api/todolist-api\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {authActions} from \"../../Auth\";\r\nimport {appActions} from \"../../CommonActions/ApplicationCommonActions\";\r\n\r\nconst {setIsLoggedInAC} = authActions\r\nconst {setAppStatus, setAppError} = appActions\r\n\r\nconst initializeApp = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}));\r\n    } else {\r\n        dispatch(setIsLoggedInAC({value: false}))\r\n    }\r\n})\r\n\r\nexport const asyncAppActions = {initializeApp}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle' as RequestStatusType,\r\n        error: null as string | null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeApp.fulfilled, state => {\r\n            state.isInitialized = true\r\n        })\r\n        builder.addCase(setAppStatus, (state, action) => {\r\n            state.status = action.payload.status\r\n        })\r\n        builder.addCase(setAppError, (state, action) => {\r\n            state.error = action.payload.error\r\n        })\r\n    }\r\n})\r\n//TYPES\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}","import {AppRootStateType} from \"../../utils/types\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized","import {asyncAppActions, slice, RequestStatusType as T1} from \"./appReducer/app-reducer\"\r\nimport * as appSelectors from './selectors'\r\n\r\n\r\n\r\nconst appActions = {\r\n    ...asyncAppActions,\r\n    ...slice.actions\r\n}\r\nconst appReducer = slice.reducer\r\n\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions,\r\n}","import {tasksReducer, todolistsReducer} from '../features/TodolistsList';\r\nimport {combineReducers} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {authReducer} from \"../features/Auth\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {appReducer} from \"../features/Application\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\n// непосредственно создаём store\r\nexport const store = configureStore(\r\n    {\r\n        reducer: rootReducer,\r\n        middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n    }\r\n)\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport {useSelector} from \"react-redux\";\r\nimport { appActions } from '../../features/CommonActions/ApplicationCommonActions';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        appActions.setAppError({error: null})\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">{error}</Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {TodolistsList} from \"../features/TodolistsList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Route} from 'react-router-dom';\r\nimport {authActions, authSelectors, Login} from \"../features/Auth\";\r\nimport {appActions} from \"../features/Application\";\r\nimport {selectIsInitialized, selectStatus} from \"../features/Application/selectors\";\r\nimport {useActions} from \"../utils/reduxUtils\";\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const App = React.memo(({demo = false, ...props}: AppPropsType) => {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        initializeApp()\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => logout(), [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n            <ErrorSnackbar/>\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\">\r\n                    ToDo-Lists\r\n                </Typography>\r\n                {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n            </Toolbar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n        </AppBar>\r\n        <Container fixed>\r\n            <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n            <Route path={'/login'} render={() => <Login/>}/>\r\n        </Container>\r\n    </div>\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {App} from \"./app/App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}