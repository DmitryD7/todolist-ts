{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","features/Login/auth-reducer.ts","app/appReducer/app-reducer.ts","utils/errorUtils.ts","features/TodolistsList/todolistReducer/todolists-reducer.ts","features/TodolistsList/taskReducer/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","id","delete","put","tasksAPI","todolistId","taskId","properties","authAPI","data","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","status","error","isInitialized","setAppStatusAC","setAppErrorAC","setIsInitializedAC","appReducer","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","setTodolistsAC","todolists","map","tl","filter","entityStatus","removeTodolistAC","index","findIndex","splice","addTodolistAC","unshift","todolist","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","model","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","startDate","priority","description","deadline","then","res","resultCode","catch","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onBlur","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","onClick","color","AddBox","EditableSpan","props","editMode","setEditMode","setNewTitle","autoFocus","onDoubleClick","Task","key","className","Completed","style","display","alignItems","justifyContent","Checkbox","checked","changeTaskStatus","New","newTitle","changeTaskTitle","removeTask","marginLeft","DeleteOutline","TodoList","demo","useEffect","items","useSelector","useDispatch","createTask","useCallback","item","addTaskTC","changeStatus","toDoListID","taskForToDoList","JsxTaskEls","onHTitleChangeCallback","newTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","onRemoveToDoListHandler","Delete","margin","Button","TodolistsList","toDoLists","addToDoList","addTodolistTC","Grid","container","padding","spacing","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","type","getFieldProps","FormControlLabel","control","App","logout","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.33bc0a2a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e25ce395-7836-43e0-9416-1f8978f20c93'\r\n    },\r\n})\r\n\r\n// API\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistType }>>(`todo-lists/`, {title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolistTitle(id: string, title: string) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${id}`, {title})\r\n    },\r\n}\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, properties: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, properties)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<CommonResponseType<AuthMeResponseDataType>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(`auth/login`)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{ id?: number }>>(`auth/login`, data)\r\n    }\r\n}\r\n\r\n// TYPES\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    todoListId: string\r\n    title: string\r\n    id: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    addedDate: string\r\n    deadline: string\r\n    order: number\r\n    description: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponseType = {\r\n    error: null | string\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\n\r\nexport type AuthMeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from \"../../app/appReducer/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n// thunks\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/todolist-api\";\r\nimport {setIsLoggedInAC} from \"../../features/Login/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n\r\n    }\r\n})\r\n\r\nexport const {setAppErrorAC, setAppStatusAC, setIsInitializedAC} = slice.actions\r\n\r\nexport const appReducer = slice.reducer\r\n\r\n//THUNKS\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n            dispatch(setIsLoggedInAC({value: false}))\r\n        }\r\n        dispatch(setIsInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n\r\n//TYPES\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}","import {\r\n    setAppErrorAC,\r\n    setAppStatusAC,\r\n} from \"../app/appReducer/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {CommonResponseType} from \"../api/todolist-api\";\r\n\r\nexport const handleServerAppError = <T>(data: CommonResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: \"failed\"}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: \"failed\"}))\r\n}","import {todolistAPI, TodolistType} from \"../../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC,} from \"../../../app/appReducer/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState,\r\n    reducers: {\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        },\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: \"all\", entityStatus: \"idle\"})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].title = action.payload.title\r\n            }\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValueType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].filter = action.payload.filter\r\n            }\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].entityStatus = action.payload.status\r\n            }\r\n        },\r\n    }\r\n})\r\n\r\nexport const {changeTodolistEntityStatusAC, changeTodolistFilterAC, changeTodolistTitleAC, addTodolistAC, removeTodolistAC, setTodolistsAC} = slice.actions\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\n// THUNK CREATORS\r\nexport const getTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(setTodolistsAC({todolists: res.data}))\r\n            dispatch(setAppStatusAC({status: \"idle\"}))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: \"loading\"}))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(removeTodolistAC({id: todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\n\r\nexport const changeTodolistTitleTC = (todolistId: string, newTodolistTitle: string) => (dispatch: Dispatch) =>\r\n    todolistAPI.updateTodolistTitle(todolistId, newTodolistTitle)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC({id: todolistId, title: newTodolistTitle}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n\r\n// TYPES\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValueType\r\n    entityStatus: RequestStatusType\r\n}","import {tasksAPI, TaskType, UpdateTaskModelType} from \"../../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/errorUtils\";\r\nimport {setAppStatusAC} from \"../../../app/appReducer/app-reducer\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"../todolistReducer/todolists-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ todolistId: string, tasks: Array<TaskType> }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => state[tl.id] = [])\r\n        })\r\n    }\r\n})\r\n\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// THUNK CREATORS\r\nexport const getTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setTasksAC({todolistId, tasks: res.data.items}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC({task: res.data.data.item}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }\r\n        )\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    tasksAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            dispatch(removeTaskAC({taskId, todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch(error => handleServerNetworkError(error, dispatch))\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const model: UpdateTaskModelType = {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: task.status,\r\n                ...domainModel\r\n            }\r\n            tasksAPI.updateTask(todolistId, taskId, model)\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC({taskId, model, todolistId}))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch(error => handleServerNetworkError(error, dispatch))\r\n        }\r\n    }\r\n\r\n//TYPES\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>,\r\n};","import {tasksReducer} from '../features/TodolistsList/taskReducer/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolistReducer/todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./appReducer/app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = configureStore(\r\n    {\r\n        reducer: rootReducer,\r\n        middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n    }\r\n)\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void,\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState<string>(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n        } else {\r\n            setError(\"Field is required!\")\r\n        }\r\n        setTitle(\"\");\r\n    };\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div onBlur={() => setError(null)}>\r\n            <TextField\r\n                disabled={disabled}\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton\r\n                disabled={disabled}\r\n                onClick={addItemHandler}\r\n                color={\"primary\"}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string,\r\n    setNewTitle: (newTitle: string) => void,\r\n    disabled?: boolean\r\n};\r\n\r\nexport const EditableSpan = React.memo(({disabled = false, ...props}: EditableSpanType) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState<string>(props.title)\r\n\r\n    const activateEditMode = () => {\r\n        !disabled && setEditMode(true);\r\n    };\r\n    const deactivateEditMode = () => {\r\n        if (title.trim()) {\r\n            props.setNewTitle(title);\r\n        } else {\r\n            setTitle(props.title)\r\n        }\r\n        setEditMode(false);\r\n    };\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onBlur={deactivateEditMode}\r\n                autoFocus\r\n                onChange={changeTitle}\r\n            />\r\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n    );\r\n});","import React, {ChangeEvent} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {DeleteOutline} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\nexport type TaskPropsType = {\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    todoListId: string\r\n    task: TaskType\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onStatusChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId);\r\n    }\r\n    const onTitleChangeCallback = (newTitle: string) => {\r\n        props.changeTaskTitle(props.task.id, newTitle, props.todoListId);\r\n    }\r\n    const removeTaskHandler = () => {\r\n        props.removeTask(props.task.id, props.todoListId);\r\n    }\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n             style={{display: 'flex', alignItems: 'center', justifyContent: 'end'}}>\r\n\r\n            <Checkbox\r\n                color={\"secondary\"}\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                onChange={onStatusChangeHandler}\r\n            />\r\n\r\n            <EditableSpan title={props.task.title} setNewTitle={onTitleChangeCallback} />\r\n            <IconButton\r\n                onClick={removeTaskHandler}\r\n                style={{marginLeft: 'auto'}}>\r\n                <DeleteOutline/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"../todolistReducer/todolists-reducer\";\r\nimport {addTaskTC, getTasksTC, removeTaskTC, updateTaskTC} from \"../taskReducer/tasks-reducer\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean,\r\n    todolist: TodolistDomainType\r\n};\r\n\r\nexport const TodoList = React.memo(({demo = false, ...props}: PropsType) => {\r\n    useEffect(() => {\r\n        if (!demo)\r\n            dispatch(getTasksTC(props.todolist.id))\r\n    }, [])\r\n\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.todolist.id])\r\n    const dispatch = useDispatch()\r\n\r\n    const createTask = useCallback((title: string) => dispatch(addTaskTC(props.todolist.id, title)), [])\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, toDoListID: string) => {\r\n        dispatch(updateTaskTC(taskId, toDoListID, {status}))\r\n    }, [dispatch]);\r\n    const changeTaskTitle = useCallback((id: string, title: string, toDoListID: string) => {\r\n        dispatch(updateTaskTC(id, toDoListID, {title}))\r\n    }, [dispatch]);\r\n    const removeTask = useCallback((id: string, toDoListID: string) => {\r\n        dispatch(removeTaskTC(id, toDoListID))\r\n    }, [dispatch]);\r\n\r\n    let taskForToDoList = tasks;\r\n    if (props.todolist.filter === \"active\") {\r\n        taskForToDoList = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        taskForToDoList = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    let JsxTaskEls = taskForToDoList.map(t => <Task\r\n        key={t.id}\r\n        task={t}\r\n        todoListId={props.todolist.id}\r\n        changeTaskStatus={changeStatus}\r\n        changeTaskTitle={changeTaskTitle}\r\n        removeTask={removeTask}\r\n    />)\r\n\r\n    const onHTitleChangeCallback = useCallback((newTitle: string) => dispatch(changeTodolistTitleTC(props.todolist.id, newTitle)), [dispatch, props.todolist.id]);\r\n    const onAllClickHandler = useCallback(() => dispatch(changeTodolistFilterAC({id: props.todolist.id, filter: \"all\"})), [dispatch, props.todolist.id]);\r\n    const onActiveClickHandler = useCallback(() => dispatch(changeTodolistFilterAC({id: props.todolist.id, filter:\"active\"})), [dispatch, props.todolist.id]);\r\n    const onCompletedClickHandler = useCallback(() => dispatch(changeTodolistFilterAC({id: props.todolist.id, filter:\"completed\"})), [dispatch, props.todolist.id]);\r\n    const onRemoveToDoListHandler = useCallback(() => dispatch(removeTodolistTC(props.todolist.id)), [dispatch, props.todolist.id]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.todolist.title} setNewTitle={onHTitleChangeCallback} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n                <IconButton onClick={onRemoveToDoListHandler} disabled={props.todolist.entityStatus === \"loading\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={createTask} disabled={props.todolist.entityStatus === \"loading\"}/>\r\n\r\n            <div style={{margin: '20px 0'}}>\r\n                {JsxTaskEls}\r\n            </div>\r\n            <div>\r\n                <Button variant={props.todolist.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                        onClick={onAllClickHandler}\r\n                >All</Button>\r\n                <Button variant={props.todolist.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                        onClick={onActiveClickHandler}\r\n                        color={\"primary\"}\r\n                >Active </Button>\r\n                <Button variant={props.todolist.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                        onClick={onCompletedClickHandler}\r\n                        color={\"secondary\"}\r\n                >Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {addTodolistTC, getTodolistsTC, TodolistDomainType} from \"./todolistReducer/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TodoList} from \"./Todolist/Todolist\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport function TodolistsList({demo = false, ...props}: TodolistsListPropsType) {\r\n    useEffect(() => {\r\n        if (!demo || isLoggedIn)\r\n            dispatch(getTodolistsTC())\r\n    }, [])\r\n\r\n    const toDoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addToDoList = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px', margin: '10px'}}>\r\n            <AddItemForm addItem={addToDoList}/>\r\n        </Grid>\r\n        <Grid container spacing={10}>\r\n            {toDoLists.map(tl => <Grid item key={tl.id}>\r\n                <Paper style={{padding: '10px'}}>\r\n                    <TodoList\r\n                        todolist={tl}\r\n                        demo={demo}\r\n                        key={tl.id}\r\n                    /></Paper>\r\n            </Grid>)}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/appReducer/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">{error}</Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {LoginParamsType} from \"../../api/todolist-api\";\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const validate = (values: LoginParamsType) => {\r\n        const errors: FormErrorType = {};\r\n\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = 'Required'\r\n        } else if (values.password.length < 3) {\r\n            errors.password = 'Too short password'\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            type=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\ntype FormErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Route} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {initializeAppTC, RequestStatusType} from \"./appReducer/app-reducer\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const App = React.memo(({demo = false, ...props}: AppPropsType) => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logout = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n            <ErrorSnackbar/>\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\">\r\n                    ToDo-Lists\r\n                </Typography>\r\n                {isLoggedIn && <Button color=\"inherit\" onClick={logout}>Log out</Button>}\r\n            </Toolbar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n        </AppBar>\r\n        <Container fixed>\r\n            <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n            <Route path={'/login'} render={() => <Login/>}/>\r\n        </Container>\r\n    </div>\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {App} from \"./app/App\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}